# Special variable that allow disable configuring resources for this application at all
enable = true

#################################################################################################
# IMPORTANT: If you don't need specific configuration (e.g. idp groups) - just don't specify it #
#################################################################################################

# WARNING: ALL IdP configuration doesn't have checks for name collision!
# You should make sure your that group names, user names, apps names and auth server names are unique across all applications applications in this repository!

# Allows to configure Okta groups
idp_groups = {
  "humanitec-user-manager"       = "OKTA User Manager group"
  "humanitec-user-manager-admin" = "OKTA User Manager Admin group"
}


# Allows to configure Okta users
idp_users = [
  {
    firstName = "UserManager"
    lastName  = "Admin"
    login     = "usermanager.admin@humanitec.com"
    email     = "usermanager.admin@humanitec.com"
    groups    = ["humanitec-user-manager", "humanitec-user-manager-admin"]
  },
]

# Allows to configure Okta user schema properties
idp_user_properties = {
  systemId = {
    type        = "string"
    permissions = "READ_WRITE"
    description = "Used to store the user id from User Manager in the default profile"
    master      = "OKTA"
    scope       = "NONE"
  }
  externalUsername = {
    type        = "string"
    permissions = "READ_WRITE"
    description = "Used for backward compatibility to store the user id from Charon in the default profile"
    master      = "OKTA"
    scope       = "NONE"
  }
}

# Allows to configure Okta oauth applications
idp_oauth_apps = [
  {
    name           = "humanitec-user-manager"
    type           = "web"
    grant_types    = ["authorization_code", "client_credentials"]
    response_types = ["code"]
    redirect_uris  = [
      "https://api.hel.humanitec.dev/api/humanitec-person-api/authorization-code/callback",
      "https://api.hel.humanitec.dev/api/humanitec-users-query-service/authorization-code/callback",
    ]
    post_logout_redirect_uris = [
      "https://api.hel.humanitec.dev/api/humanitec-person-api",
      "https://api.hel.humanitec.dev/api/humanitec-users-query-service",
    ]
    login_mode            = "DISABLED"
    issuer_mode           = "CUSTOM_URL"
    authentication_policy = "password_only"
    skip_groups           = true
    auth_server           = "humanitec-user-manager"
    groups                = ["humanitec-user-manager", "humanitec-user-manager-admin"]
  },
  {
    name           = "humanitec-user-manager-client"
    type           = "browser"
    grant_types    = ["authorization_code", "refresh_token"]
    response_types = ["code"]
    redirect_uris  = [
      "https://api.hel.humanitec.dev/humanitec-user-manager/login/callback"
    ]
    post_logout_redirect_uris = [
      "https://api.hel.humanitec.dev/humanitec-user-manager"
    ]
    login_mode                 = "DISABLED"
    issuer_mode                = "CUSTOM_URL"
    authentication_policy      = "password_only"
    login_uri                  = "https://api.hel.humanitec.dev"
    skip_groups                = true
    auth_server                = "humanitec-user-manager"
    token_endpoint_auth_method = "none"
    groups                     = ["humanitec-user-manager", "humanitec-user-manager-admin"]
  }
]

# Allows to configure Okta auth server and related to it things (scopes, claims, policies)
idp_auth_servers = {
  "humanitec-user-manager" = {
    audiences   = ["api://usermanager"]
    issuer_mode = "CUSTOM_URL"
    scopes      = [
      {
        name             = "user-manager"
        display_name     = "user-manager scope for users"
        description      = "user-manager scope for users"
        metadata_publish = "NO_CLIENTS"
        consent          = "IMPLICIT"
      },
      {
        name             = "user-manager-admin"
        description      = "scope for UM admin endpoints"
        display_name     = "scope for UM admin endpoints"
        metadata_publish = "NO_CLIENTS"
        consent          = "IMPLICIT"
      }
    ]
    claims = [
      {
        name  = "systemId"
        value = "user.systemId"
        type  = "RESOURCE"
      },
      {
        name  = "externalUsername"
        value = "user.externalUsername"
        type  = "RESOURCE"
      },
      {
        name  = "identifier"
        value = "user.identifier"
        type  = "RESOURCE"
      }
    ]
    policies = [
      {
        name             = "Users"
        description      = "Access policy for users"
        status           = "ACTIVE"
        priority         = 1
        client_whitelist = ["humanitec-user-manager", "humanitec-user-manager-client"]
        rules            = [
          {
            grant_type_whitelist = ["authorization_code"]
            name                 = "Rule for default UM scope"
            group_whitelist      = ["humanitec-user-manager"]
            scope_whitelist      = ["openid", "profile", "email", "address", "phone", "user-manager"]
            priority             = 1
          },
          {
            name                 = "Rule for admin UM scope"
            grant_type_whitelist = ["authorization_code"]
            group_whitelist      = ["humanitec-user-manager-admin"]
            scope_whitelist      = [
              "openid", "profile", "address", "phone", "user-manager", "user-manager-admin", "user-manager-internal"
            ]
            priority = 2
          }
        ]
      },
      {
        name             = "Service To Service"
        description      = "Policy for UM services communications"
        status           = "ACTIVE"
        priority         = 1
        client_whitelist = ["humanitec-user-manager"]
        rules            = [
          {
            grant_type_whitelist = ["client_credentials"]
            name                 = "Rule for UM service to service communication"
            group_whitelist      = []
            scope_whitelist      = ["openid", "user-manager-internal", "user-manager-admin"]
            priority             = 1
          }
        ]
      },
      {
        name             = "External Clients"
        description      = "Control scopes for external clients"
        status           = "ACTIVE"
        priority         = 1
        client_whitelist = []
        rules            = [
          {
            grant_type_whitelist = ["client_credentials"]
            name                 = "Rule for UM service to service communication"
            group_whitelist      = []
            scope_whitelist      = ["openid", "user-manager-advisory"]
            priority             = 1
          }
        ]
      },
      {
        name             = "External Clients Excluded"
        description      = "Denies access to UM API scope for other applications or users"
        status           = "ACTIVE"
        priority         = 1
        client_whitelist = []
        rules            = [
          {
            grant_type_whitelist = [
              "client_credentials", "authorization_code", "implicit", "password", "interaction_code",
              "urn:ietf:params:oauth:grant-type:saml2-bearer", "urn:ietf:params:oauth:grant-type:token-exchange",
              "urn:ietf:params:oauth:grant-type:device_code"
            ]
            name            = "Deny access to all scopes"
            group_whitelist = []
            scope_whitelist = ["openid"]
            priority        = 1
          }
        ]
      }
    ]
  }
}
